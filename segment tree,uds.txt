class SegmentTree {
private:
	vi st, A;// st tree and A is array
	int n;
	int left (int p) { return p << 1; }
	int right(int p) { return (p << 1) + 1; }
	void build(int p, int L, int R) { // O(n)
		if (L == R) // as L == R, either one is fine
			st[p] = L; // store the index
		else { // recursively compute the values
			build(left(p) , L , (L + R) / 2);
			build(right(p), (L + R) / 2 + 1, R );
			int p1 = st[left(p)], p2 = st[right(p)];
			st[p] = (A[p1] <= A[p2]) ? p1 : p2;
		}
	}

	void update(int ind,int L,int R,int p,int val)
	{
		if(L==R)
		{
			A[idx]=val;
			st[p]=val;
		}
		else
        {
            int mid=(L+R)/2;
            if(ind>=L and ind<=mid)
                update(ind,L,mid,left(p),val);
            else
                update(ind,mid+1,R,right(p),val);
            st[p]=min(st[left(p)],st[right(p)]);
        }
	}

	

	int rmq(int p, int L, int R, int i, int j) { // O(log n)
		if (i > R || j < L) return -1; // current segment outside query range
		if (L >= i && R <= j) return st[p]; // inside query range
		// compute the min position in the left and right part of the interval
		int p1 = rmq(left(p) , L , (L+R) / 2, i, j);
		int p2 = rmq(right(p), (L+R) / 2 + 1, R , i, j);
		if (p1 == -1) return p2; // if we try to access segment outside query
		if (p2 == -1) return p1; // same as above
		return (A[p1] <= A[p2]) ? p1 : p2; // as in build routine
	}

public:
	SegmentTree(const vi &_A) {
	A = _A; n = (int)A.size(); // copy content for local usage
	st.assign(4 * n, 0); // create large enough vector of zeroes
	build(1, 0, n - 1); // recursive build
	}

	void update(int ind,int val)
	{
		update(ind,0,n-1,1,val);}

	int rmq(int i, int j) { return rmq(1, 0, n - 1, i, j); } // overloading
	};

int main() {
    int arr[] = { 18, 17, 13, 19, 15, 11, 20 }; // the original array
    vi A(arr, arr + 7);
    SegmentTree st(A);
    printf("RMQ(1, 3) = %d\n", st.rmq(1, 3)); // answer = index 2
    printf("RMQ(4, 6) = %d\n", st.rmq(4, 6)); // answer = index 5
} // return 0;

class UnionFind { // union find by rank
private: 
	vi p, rank; // remember: vi is vector<int>
public:
	UnionFind(int N) { 
		rank.assign(N, 0);
		p.assign(N, 0); for (int i = 0; i < N; i++) p[i] = i; 
	}
		int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }
		bool isSameSet(int i, int j) { return findSet(i) == findSet(j); }
		void unionSet(int i, int j) {
			if (!isSameSet(i, j)) { // if from different set
			int x = findSet(i), y = findSet(j);
			if (rank[x] > rank[y]) p[y] = x; // rank keeps the tree short
			else { p[x] = y;
				if (rank[x] == rank[y]) rank[y]++; }
		} 
	}
};

class FenwickTree {
private: 
vi ft; // recall that vi is: typedef vector<int> vi;
int LSOne(int b){return b&(-b);}
public: 
	FenwickTree(int n,int arr[]) { ft.assign(n + 1, 0);
		for(int i=0;i<n+1;i++)
			adjust(arr[i],1);
	 } // init n + 1 zeroes
	int rsq(int b) { // returns RSQ(1, b)
		int sum = 0; for (; b; b -= LSOne(b)) sum += ft[b];
		return sum; 
	} // note: LSOne(S) (S & (-S))
	int rsq(int a, int b) { // returns RSQ(a, b)
		return rsq(b) - (a == 1 ? 0 : rsq(a - 1)); }
	// adjusts value of the k-th element by v (v can be +ve/inc or -ve/dec)
	void adjust(int k, int v) { // note: n = ft.size() - 1
		for (; k < (int)ft.size(); k += LSOne(k)) ft[k] += v; }
};
